<?xml version="1.0" encoding="UTF-8"?>
<chapter xml:id="tempel-userguide-templats" xml:lang="pl" status="DRAFT"
	xmlns="http://docbook.org/xml/5.0/xsd/docbook.xsd" version="5.0"
	xmlns:xl="http://www.w3.org/1999/xlink"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:svg="http://www.w3.org/2000/svg"
	xmlns:m="http://www.w3.org/1998/Math/MathML"
	xmlns:html="http://www.w3.org/1999/xhtml"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

	<title><!--Przegląd/-->Szablony</title>

	<para>Tempel w trakcie uruchomienia szablonu wykonuje kod zawarty w
	silniku generacji w celu utworzenia pewnego zasobu wyjściowego w
	oparciu o zasów wejściowy i wartości wymaganych parametrów.</para>

	<para>Użwając tej nomenklatury, za uruchamiany przez Tempel szablon
	uwarzany będzie przetwarzany zasób wejściowy wraz z definicją, która
	określa jaki silnik ma zostać uruchomiony, jake parametry mają zostać
	do niego dostarczone. Definicja ta musi posiadać unikatowy uniwersalny
	identyfikator, dzięki któremu może zostać odszukana w repozytoriach
	szablonów.</para>

	<section>
		<title><!--Przegląd/Szablony/-->Zasoby</title>

		<para>Zasoby odgrywają w koncepcji funkcjonowania narzędzia Tempel
		kluczową rolę. Silniki generacji transformują jedne zasoby w inne,
		lub po prostu tworzą nowe zasoby jedynie w oparciu o zebrane
		wartości parametrów.</para>

		<para>Widać więc, że zasoby występujące w procesie uruchamiania
		szablonu Tempel można podzielić na dwa zasadnicze rodzaje, tj.
		zasoby wejściowe i zasoby wyjściowe.</para>

		<section>
			<title><!--Przegląd/Szablony/Zasoby/-->Wejściowe</title>

			<para>Zasoby wejściowe transformowane są przez silniki generacji
			w celu wytworzenia zasobów wyjściowych. To jakiego rodzaju mogą
			to być zasoby zależy jedynie od możliwości działających na nich
			silników generacji. Z założenia zasoby wejściowe są strukturami
			systemu plików (katalogami i plikami, przeważnie tekstowymi).
			Nic nie stoi jednak na przeszkodzie, aby były np. wczytywane z
			bazy danych<footnote><para>TODO: Do weryfikacji. To silnik generacji
			może sobie doczytywać coś z bazy, ale do niego są przkazywane
			standardowe zasoby dyskowe (no chyba, że zrobimy nowy typ
			repozytorium).</para></footnote>.</para>
	
			<para>W trakcie wykonywania uruchomionego szablonu Tempel
			przekazuje przeznaczony do przetworzenia zasób wejściowy do
			silnika generacji szablonu. Lokalizacja tego zasobu jest
			jednoznacznie określana w oparciu o zasady przechowywania
			zasobów w repozytorium, w którym szablon został odnaleziony.
			Mogą one się różnić w różnych typach repozytoriów, jednak w
			każdym z nich lokalizacja ta jest wyznaczana na podstawie grupy,
			identyfikatora i wersji szablonu.</para>

			<para>Tempel może wykorzystywać repozytoria szablonów różnego
			typu, przechowujące zasoby wejściowe w różny sposób. Z tego
			powodu konieczna jest normalizacja sposobu dostępu do pobranych
			z repozytorium zasobów przed ich przekazaniem do silnika
			generacji. Normalizacja ta jest uzyskiwana poprzez interfejs
			<interface>ITemplateSource</interface>.</para>

			<para>Należy pamiętać, że mogą istnieć szablony, które nie
			wykorzystują żadnych zasobów wejściowych. Korzystają one z
			silników generacji, które do poprawnego działania i wytworzenia
			zasobu wyjściowego wymagają jedynie wartości parametrów
			wejściowych. Pzykładem takiego silnika jest silkik tworzący
			katalogi.</para> 
		</section>

		<section>
			<title><!--Przegląd/Szablony/Zasoby/-->Wyjściowe</title>

			<para>Zasoby wyjściowe tworzone są przez silniki generacji w
			oparciu o zasoby wejściowe i wartości parametrów wejściowych.
			Z założenia są one strukturami systemu plików, tj. katalogami
			i plikami w różnch formatach (przeważnie tekstowych). Mogą też
			być plikami binarnymi (np. dokumentami <filename>pdf</filename>
			lub archiwami <filename>zip</filename>), rekrodami tworzonymi
			w bazie danych bądź wiadomościami e-mail. Takie "nietypowe"
			rodzaje zasobów wymagają jedynie dostarczenia specjalizowanych
			silników do ich generacji.</para>
		</section>
	</section>

	<section>
		<title><!--Przegląd/Szablony/-->Definicja</title>

		<para></para>

		<section>
			<title><!--Przegląd/Szablony/Definicja/-->Pliki
			<filename>tempel.xml</filename></title>

			<programlisting language="xml"><![CDATA[
<template engine="org.agiso.tempel.engine.MakeDirEngine">
    <groupId>org.agiso.tempel.templates</groupId>
    <templateId>base.mkdir</templateId>
    <version>1.0.0</version>

    <params>
      <param key="name" name="Directory name" />
    </params>

    <resource>
        <target>${name}</target>
    </resource>
</template>
			]]></programlisting>

		</section>

		<section>
			<title><!--Przegląd/Szablony/Definicja/-->Silnik generacji</title>

			Kod wykonujący transformację zasobu wejścowego w wyjścowy umieszczany
			jest w silnikach generacji.
		</section>

		<section>
			<title><!--Przegląd/Szablony/Definicja/-->Parametry</title>

			<para>Parametry w są parami w których nazwanemu kluczowi
			znakowemu przypisywana jest konkretna wartość będąca łańcuchem
			znakowym (typu String) bądź obiektem dowolnego typu (naczęściej
			prostym obiektem POJO).</para>

			<para>W systemie tempel mechanizm obsługi parametrów, tj. ich
			gromadzenia, walidacji, konwersji i wykorzystania stanowi jeden
			z ważniejszych elementów jego działania. Parametry są bowiem
			wykorzystywane w niemal każdym jego elemencie. Są definiowane
			i używane w plikach tempel.xml wszystkich poziomów
			konfiguracyjnych, stanowią podstawowy element wprowadzający
			zmienność generowanych zasobów wyjściowych w oparciu o zasoby
			wejściowe (w których są używane). Określanie ich wartości odbywa
			się w trakcie uruchamniania szablonu na podstawie parametrów
			linii komend i w trybie interakcji z użytkownikiem.</para>

			<section>
				<title>Poziomy parametrów</title>

				<para>SYSTEM - parametry systemowe uruchomienia maszyny
				wirtualnej JAVA. Ponieważ odwołania do parametrów mogą mieć
				formę ścieżek JavaBeans, oryginalne nazwy kluczy parametrów
				systemowch zmodyfikowane są przez zastąpienie wszystkich
				wystąpień znaku '.' (kropka) znakiem '_' (podkreślnik).
				Parametry systemowe są parametrami najniższego poziomu,
				co oznacza, że przykrywane są przez parametry wszystkich
				innych poziomów.</para>

				<para>GLOBAL - parametry globalne zdefiniowane w sekcji
				'properties' pliku tempel.xml znajdującym się w podkatalogu
				conf ścieżki instalacyjnej aplikacji. Są to głównie parametry
				konfiguracyjne wykorzystywane przez samą aplikację określające
				np. lokalizację lub formaty łańcuhów dat i czasów używane w
				szablonach, oraz parametry dostarczycieli szablonów (np.
				parametry wskazujące lokalizację konfiguracji maven
				odczytywane przez provider'a MvnTemplateProvider
				umożliwiającego pobieranie szablonów z repozytoriów Apache
				Maven).</para>

				<para>USER - parametry użytkownika zdefiniowane w sekcji
				'properties' pliku tempel.xml znajdującego się w podkatalogu
				.tempel katalogu domowego biężącego użytkownika. Najczęściej
				są to parametry szablonów identyfikuące osobę uruchamiającą
				narzędzie tempel, takie jak nazwa użytkownika czy jego adres
				email.
				Parametry poziomu użytkownika przykrywają parametry globalne.
				</para>
	
				<para>LOCAL - parametry lokalne zdefiniowane w sekcji
				'properties' pliku tempel.xml znajdującego się w katalogu
				uruchomienia polecenia tpl. Są to parametry specyficzne dla
				lokalizacji (projektu). Mogą być wykorzystywane do
				przeciążania parametrów globalnych i użytkownika (np. gdy w
				projekcie używany jest inny format daty niż zdefiniowany
				globlanie, lub gdy adres email użytkownika w danym projekcie
				jest inny niż zdefiniowany w jego katalogu domowym).</para>
	
				<para>RUNTIME - Parametry uruchomieniowe określane są w
				trakcie uruchamiania polecenia <command>tpl</command> jako
				parametry jego wywołania. Wykorzystywane są do dostarczenia
				już w trakcie wywołania wartości parametrów, które normalnie
				określane są w trybie interaktywnym w trakcie uruchamiania
				szablonu. Mogą też być użyte do określenia wartości
				parametrów, które normalnie są dynamicznie wyznaczane podczas
				uruchamiania apikacji takich jak data i czas uruchomienia).
				</para>
			</section>

			<section>
				<title>Parametry wewnętrzne</title>

				<para>Tempel definiuje i wykorzystuje kilka standardowych
				parametrów, których wartości wyznaczane są w trakcie jego
				uruchamiania. Są to następujące parametry:</para>

				<para>date (typu java.util.Date) - zawiera datę i czas
				uruchomienia polecenia tpl. Może być określony w trakcie
				wywołania polecenia tpl w następujący sposób:
				<command>
				tpl -Ddate=lancuch_data_czas -Ddate_format=... -Dtime_format=...b 
				</command>
				</para>

				<para>date_locale (typu java.util.String) - zawiera kod
				lokalizacji zgodny z Java Locale (IETF BCP 47) użyty podczas
				wyznaczania parametrów zawierających reprezentację wartości
				przechowywanej w parametrze <command>code</command> takich jak
				<command>date_short</command> czy <command>time_full</command>.
				Często jest określany w globalnym (dla całego systemu) bądź
				lokalnym (dla projektu) pliku <filename>tempel.xml</filename>.
				</para>

				<para>date_short
				</para>

				<para>date_medium
				</para>

				<para>date_long
				</para>

				<para>date_full
				</para>

				<para>time_short
				</para>

				<para>time_medium
				</para>

				<para>time_long
				</para>

				<para>time_full
				</para>

				<para>
				</para>

				<para>
				</para>

				<para>
				</para>

			</section>

			<para>Parametry gromadzone w trakcie uruchomienia ...
			</para>
		</section>

		<section>
			<title><!--Przegląd/Szablony/Definicja/-->Walidatory</title>

		</section>

		<section>
			<title><!--Przegląd/Szablony/Definicja/-->Konwertery</title>

		</section>

		<section>
			<title><!--Przegląd/Szablony/Definicja/-->Podszablony</title>

			<para></para>
		</section>
	</section>
</chapter>
